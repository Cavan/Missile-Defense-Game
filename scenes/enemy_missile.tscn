[gd_scene load_steps=4 format=3 uid="uid://d0gqjko6wlvf0"]

[ext_resource type="Script" path="res://scripts/enemy_missile.gd" id="1_qrstuv"]
[ext_resource type="Texture2D" path="res://icon.svg" id="2_wxyz0"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_67890"]
size = Vector2(48, 48) # Slightly larger for differentiation

[node name="EnemyMissile" type="Area2D"]
script = ExtResource("1_qrstuv")
collision_layer = 2 # Corresponds to "enemy_missiles"
collision_mask = 3  # Corresponds to "player_projectiles" (layer 1) and "player_base" (layer 3)
                    # Layer 1 (bit 0) + Layer 3 (bit 2) = 1 | 4 = 5. Oh, mask is bitmask.
                    # Player projectiles is layer 1 (mask bit 0)
                    # Enemy missiles is layer 2 (mask bit 1)
                    # Player base is layer 3 (mask bit 2)
                    # So, for enemy_missile (layer 2) to collide with player_projectiles (layer 1) and player_base (layer 3):
                    # its mask should be (1 << 0) | (1 << 2) = 1 | 4 = 5.

[node name="MissileSprite" type="Sprite2D" parent="."]
modulate = Color(1, 0.6, 0.6, 1) # Tinted red
scale = Vector2(0.375, 0.375) # Slightly larger (128 * 0.375 = 48)
texture = ExtResource("2_wxyz0")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_67890")

# Connection for body_entered is removed, as the script will handle area_entered if needed.
# The provided enemy_missile.gd script comments out its own collision handling,
# relying on player_projectile.gd to manage the interaction.
# [connection signal="body_entered" from="." to="." method="_on_EnemyMissile_body_entered"]
